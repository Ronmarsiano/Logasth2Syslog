input {
   kafka {
	bootstrap_servers => "kafka-647694169-1-839396107.prod-southcentralus-az.kafka-infosec-az-prod.ms-df-messaging.prod-az-southcentralus-8.prod.us.walmart.net:9093, kafka-647694169-5-839396119.prod-southcentralus-az.kafka-infosec-az-prod.ms-df-messaging.prod-az-southcentralus-8.prod.us.walmart.net:9093, kafka-766725960-2-839397194.prod-southcentralus-az.kafka-infosec-az-prod.ms-df-messaging.prod-az-southcentralus-13.prod.us.walmart.net:9093, kafka-766725960-15-839397233.prod-southcentralus-az.kafka-infosec-az-prod.ms-df-messaging.prod-az-southcentralus-13.prod.us.walmart.net:9093"
        ssl_endpoint_identification_algorithm => ""
        security_protocol => "SSL"
        ssl_truststore_location => "/home/logstash/cacerts/walmartca.jks"
        ssl_truststore_password => "${TRUSTSTORE_PWD}"
        ssl_truststore_type => "JKS"
        topics => "Firewall"
        codec => cef
        max_poll_records => "1000"
        client_id => "ls_sentinel-fw"
        group_id => "ls_sentinel-fw"		
        consumer_threads => "1"
  } 
}

filter {


   # Capture Other Products

   if [deviceProduct] != "Fortigate" and [deviceProduct] != "ASA" and [deviceProduct] != "PAN-OS" {
      drop {}
   }

   #metrics {
   #   meter => "events"
   #   add_tag => "metric"
   #}

   # Map the @timestamp with the agent receipt time, as recorded in agentReceiptTime

   date {
      match => [ "agentReceiptTime", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "UNIX_MS" ]
      # add_field => { "[@metadata][event-date]" => "%{+YYYY.MM.dd}" }
   }

   mutate  {
      copy => { "agentReceiptTime" => "ccSearchTime" }
   }

   #if ( "2019.08.02" in [@metadata][event-date] or "2019.08.01" in [@metadata][event-date] ) {
   #   mutate { add_field => { "[@metadata][index-name]" => "soc-firewall-1-%{+YYYY.MM.dd}" } }
   #}
   #else {
   #   mutate { add_field => { "[@metadata][index-name]" => "soc-firewall-%{+YYYY.MM.dd}" } }
   #}

   if ![baseEventCount] {
      mutate { add_field => { "baseEventCount" => "1" } }
   }

   if [sourceUserName] {
      mutate { lowercase => ["sourceUserName"] }
   }

   if [destinationUserName] {
      mutate { lowercase => ["destinationUserName"] }
   }

   # To map the attacker Geo IP if plausible


   if [requestUrl] {
      grok {
         match => [ "requestUrl", "%{URIPROTO:requestProtocol}://(?:%{USER:requestUser}(?::[^@]*)?@)?(?:%{IPORHOST:requestUrlHost})?(?::%{POSINT:requestUrlPort})?(?:%{URIPATH:requestUrlFileName})?(?:\?%{GREEDYDATA:requestUrlQuery})?" ]
      }
   }

   geoip {
      source => "sourceAddress"
      target => "source"
   }

   # To map the target Geo IP if plausible

   geoip {
      source => "destinationAddress"
      target => "destination"
   }

}

output {
   #if "metric" in [ta



foo {
              destination_ip => "127.0.0.1"
              destination_port => 25226
              plugin_flush_interval => 1
              max_items => 8000
	      #path => "/tmp/cefevents.log"
              codec => cef {
                             reverse_mapping => true
                             delimiter => "\r\n"
                             vendor      => "%{deviceVendor}"
                             product     => "%{deviceProduct}"
                             version     => "%{deviceVersion}"
                             signature   => "%{deviceEventClassId}"
                             name        => "%{name}"
                             severity    => "%{severity}"
                             fields => [
"ad.cs10",
"ad.cs13",
"ad.cs14",
"ad.cs19",
"ad.cs7",
"ad.cs8",
"agentAddress",
"agentHost",
"agentHostName",
"agentId",
"agentMacAddress",
"agentReceiptTime",
"agentTimeZone",
"agentType",
"agentVersion",
"agentZoneURI",
"applicationProtocol",
"baseEventCount",
"bytesIn",
"bytesOut",
"categoryDeviceType",
"ccSearchTime",
"cefVersion",
"city_name",
"continent_code",
"country_code2",
"country_code3",
"country_name",
"destinationAddress",
"destinationHostName",
"destinationLatitude",
"destinationLongitude",
"destinationMacAddress",
"destinationNtDomain",
"destinationPort",
"destinationProcessId",
"destinationProcessName",
"destinationTimeZone",
"destinationUserId",
"destinationUserName",
"destinationUserPrivileges",
"deviceAction",
"deviceAddress",
"deviceCustomFloatingPoint1",
"deviceCustomFloatingPoint1Label",
"deviceCustomFloatingPoint2",
"deviceCustomFloatingPoint2Label",
"deviceCustomFloatingPoint3",
"deviceCustomFloatingPoint3Label",
"deviceCustomFloatingPoint4",
"deviceCustomFloatingPoint4Label",
"deviceCustomIPv6Address1",
"deviceCustomIPv6Address1Label",
"deviceCustomIPv6Address2",
"deviceCustomIPv6Address2Label",
"deviceCustomIPv6Address3",
"deviceCustomIPv6Address3Label",
"deviceCustomIPv6Address4",
"deviceCustomIPv6Address4Label",
"deviceCustomNumber1",
"deviceCustomNumber1Label",
"deviceCustomNumber2",
"deviceCustomNumber2Label",
"deviceCustomNumber3",
"deviceCustomNumber3Label",
"deviceCustomString1",
"deviceCustomString1Label",
"deviceCustomString2",
"deviceCustomString2Label",
"deviceCustomString3",
"deviceCustomString3Label",
"deviceCustomString4",
"deviceCustomString4Label",
"deviceCustomString5",
"deviceCustomString5Label",
"deviceCustomString6",
"deviceCustomString6Label",
"deviceEventCategory",
"deviceHostName",
"deviceProcessId",
"deviceReceiptTime",
"dma_code",
"endTime",
"eventOutcome",
"fileName",
"fileSize",
"ip",
"lat",
"latitude",
"location",
"lon",
"longitude",
"managerReceiptTime",
"message",
"postal_code",
"region_code",
"region_name",
"requestClientApplication",
"requestUrlQuery",
"source",
"requestUrl",
"sourceAddress",
"sourceHostName",
"sourceLatitude",
"sourceLongitude",
"sourceMacAddress",
"sourceNtDomain",
"sourcePort",
"sourceProcessId",
"sourceProcessName",
"sourceUserId",
"sourceUserName",
"sourceUserPrivileges",
"startTime",
"transportProtocol",
"timezone",
"ccSearchTime"
                             ]
              }
  }


}
